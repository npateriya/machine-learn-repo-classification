cisco_aci-scripts
=========
Requirements: 
    Python 2.7+ - 2.7.9 recomended due to security changes
    Cisco ACItoolkit - https://github.com/datacenter/acitoolkit
    Cobra SDK installed from the APIC - See bottom of README for install links.
    Use a Docker image by the same name (tigelane/cisco_aci-scripts) so you don't need to do any installation.
    
Repository for work creating setup scripts for ACI

The "GO" utilities will get a basic lab running in just a few minutes.  Create the config file using go_lab.  Then use go_node, go_lab, and finally go_esx if you need it.

go_node.py - 
    Finds switches (nodes) that have not been accepted into the fabric and adds them.  Uses the config
    template from go_lab.py.
    
go_lab.py - 
    Automated configuration of internal BGP, DNS, NTP, and OOB Management.  Based on a config template
    that can be generated by the script.
    
go_esx.py -
    Automated configuration of VMware ESXi and VCenter.
    
EPG-asa-VLAN.py - 
    This script creates a number of ip segments and EPGs that can all communicate.  This simulates
    replication of a customers existing environment where they have VLANs with no security between them.
    They could start this way and then add security as they move forward.  ACI can have complex setups
    and simples ones.  This is an example of a simple setup that's far easier to do than with traditional
    CLI based networks.
    
aci-to-twitter.py - 
    Still a work in progress.  This subscribes to ACI error messages and then sends a tweet when it
    get's one.  This could be used as a notification when away from the console.
    
aci_miniapps.py - 
    This is a conglomoration mostly of the sample scripts in git - datacenter/acitoolkit.
    I have built a small menu to select items.  I also use a credentials.py file that is insecure.

create_full-tenant.py - 
    This application was written very early in the ACI days.
    The goal of this application is to create a large number of Tenants and associated Security Domain.
    This creates virtual users that can then access the system in an isolated environment.
    **  This would work well for building ACI labs  **
    It then creates a local user with full admin access to that Tenant.
    I have also put some pauses in the script so that you could use it to show a customer
    that the items are being built in the APIC before moving to the next item.
    
    Please note that very little error checking is being done.  It's entirely possible 
    that this code could crash your system (not likely).  You have been warned!

create_three-tier.py - 
    Create a three tier application along with associated Tenant, Bridge Domain
    Private Network.  If they do not exist they will be created.
    Associate the three tires to a VMM domain.
    Create simple contracts between each layer.

script_template.py -
    Just what it says.  Get logged in with either cobra or acitoolkit and wrtie your script from there.


easy_install -Z --find-links http://<apic>/cobra/_downloads acicobra

easy_install -Z --find-links http://<apic>/cobra/_downloads acimodel
